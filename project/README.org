* Virtual Reality Controlling with UR10
** UR10 Robot Specification
The implementation of any version of inverse kinematics requires the knowledge of 
the size and machanical specifications of the robotic arm. Here the real robot 
size are presented below. You can either choose to **translate** it into 3d space, 
or simply use real world scale measures to carry the implementation.
** BackEngine
BackEngine project is mainly for reading data from the VR room and provide gesture analysis. The project is in C++. Requirements and documentations are prepared in [[./BackEngine/README.org][this file]](In org-mode Emacs, you can just use C-c, C-o to go to that file).
** GesEngine
GesEngine is a QT based project for capturing gesture data in the CAVE system, analysis of data and gesture recognition. 

GesEngine communicates with VRControlling with pure TCP sockets. Make sure that:
- The port you use for connecting the VRControlling is the same in SharpConnect.dll, NetworkConnection.cs and m_server in GesEngine.


** VRControlling 
This is the pick and place project for the VR room. What is really important is that you need to go through [[this post][http://wiki.unity3d.com/wiki/index.php?title=Simple_TCP/IP_Client_-_Server]](if you are new to csharp). 

If SharpConnect.dll is not in the plugin folder in assets, you should compile one using SharpConnect.cs by doing:
- csc /target:library SharpConnect.cs (Under windows)
** Hardware 
The hardware of this project is a CAVE VR system. Markers are located on gloves. Beware that the minimum distance between any 2 markers should exceed 3cm. 

Marker id could change but we assume that it doesn't change very fast.

